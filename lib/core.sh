#!/usr/bin/env bash

function init() {
    # Initialize variables
    PROJECT_DIR=$1
    PROJECT_NAME=$(basename $PROJECT_DIR)
    local group_directory=$(dirname $PROJECT_DIR)
    PROJECT_GROUP=$(basename $group_directory)
    PROJECT_TITLE="$PROJECT_GROUP/$PROJECT_NAME"
    COMPOSE_FILE="$PROJECT_DIR/docker-compose.yml"
    COMPOSE_PROJECT_NAME="$PROJECT_GROUP-$PROJECT_NAME"
    APP_CONTAINER_NAME="$COMPOSE_PROJECT_NAME-app"

    # Load include file with custom functions
    if [[ -e "$PROJECT_DIR/juggler.sh" ]]; then
        source "$PROJECT_DIR/juggler.sh"
    fi

    # Read all necessary variables from docker-compose.yml and add them to the environment file
    local composeVariables=$(/opt/juggler/lib/python/list_compose_variables.py $COMPOSE_FILE)
    if [[ ! -z $composeVariables ]]; then
        cat > "$PROJECT_DIR/.env" <<EOT
# This file was generated by Juggler. Do not edit.
# Make your changes in juggler.sh instead.

EOT
        for variable in $composeVariables; do
            eval "local value=\${$variable}"
            echo $variable=$value >> "$PROJECT_DIR/.env"
        done
    fi

    if [[ ! -z $MYSQL_DATABASE && ! -z $MYSQL_USER && ! -z $MYSQL_PASSWORD ]]; then
        ext_mysql
    fi
}

function invoke_composer() {
    # TODO: Omit sudo if not required
    sudo docker-compose -f $COMPOSE_FILE --env-file "$PROJECT_DIR/.env" -p $COMPOSE_PROJECT_NAME $@
}

function cmd_up() {
    if [[ $1 == "-f" ]]; then
        invoke_composer down
    fi

    invoke_composer up -d
}

function cmd_down() {
    invoke_composer down
}

function cmd_update() {
    if [[ $1 == "-r" ]]; then
        local recreate=1
        shift
    fi

    declare -F update_images > /dev/null
    if [[ $? == 0 ]]; then
        update_images $@
    else
        invoke_composer pull
    fi

    if [[ $recreate == 1 ]]; then
        invoke_composer up -d
    fi
}

function cmd_start() {
    invoke_composer start $@
}

function cmd_restart() {
    invoke_composer restart $@
}

function cmd_stop() {
    invoke_composer stop $@
}

function cmd_exec() {
    invoke_composer exec app bash
}

function cmd_logs() {
    invoke_composer logs -f app
}

function ext_mysql() {
    declare -F "cmd_execdb" > /dev/null
    if [[ $? != 0 ]]; then
        function cmd_execdb() {
            invoke_composer exec db mysql -h localhost -u $MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE
        }
    fi
}
